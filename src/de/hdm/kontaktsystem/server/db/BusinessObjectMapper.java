package de.hdm.kontaktsystem.server.db;

import java.io.Serializable;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import de.hdm.kontaktsystem.shared.bo.BusinessObject;
import de.hdm.kontaktsystem.shared.bo.Property;

public class BusinessObjectMapper implements Serializable {
	

	private static final long serialVersionUID = 1L;
	
	
	/*
	 * Singleton Pattern
	 */
	
	  private static BusinessObjectMapper businessObjectMapper = null;

	  protected BusinessObjectMapper() {
		  
	  }

	  public static BusinessObjectMapper businessObjectMapper() {
	    if (businessObjectMapper == null) {
	    	businessObjectMapper = new BusinessObjectMapper();
	    }

	    return businessObjectMapper;
	  }
	  
	  public void update(BusinessObject bo){
		  Connection con = DBConnection.connection();
		  try{
			  PreparedStatement stmt = con.prepareStatement("UPDATE BusinessObject SET status = ? WHERE bo_ID = ?");
			  stmt.setBoolean(1, bo.getShared_status());
			  stmt.setInt(2, bo.getBo_Id());
			  stmt.executeUpdate();
			  
		  }catch(SQLException e){
			  
		  }
	  }
	  
	  
	  /*
	   * Creates an new row in the BusinessObject table that generates a ID for the BusinessObject 
	   * and set a Timestamp for the creationDate
	   */
	  public void insert(BusinessObject bo){
		  Connection con = DBConnection.connection();

			try {
				PreparedStatement statement = con.prepareStatement(
						"INSERT INTO BusinessObject (user_ID) VALUES (?)", Statement.RETURN_GENERATED_KEYS);
				
				statement.setInt(1, bo.getUserId());
				
				
				// Execute the prepared SQL Statement
				statement.executeUpdate();
				
				// save the Autogenerated BusinessObject ID into an result set 
				ResultSet rs = statement.getGeneratedKeys();
				if (rs.next()) {
					
					/** 
					 * Put the generated bo_ID from the database as an ID for the BusinessObject,
					 * this allows the inherited classes to use the ID as their ID (primaryKey).
					 * So there is only one automatically generated primary key for all BusinessObjects
					 */
					
					bo.setBo_Id(rs.getInt(1));
					System.out.println("ID: "+ bo.getBo_Id());
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
	  }

	public void deleteBusinessObject(BusinessObject bo) {
		// TODO Auto-generated method stub
		
	}
	
	  
	  

}
